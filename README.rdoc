== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version
ruby 2.2.4p230 (2015-12-16 revision 53155) [i386-mingw32]

* System dependencies
actionmailer (4.2.6, 4.2.5.1, 4.2.0)
actionpack (4.2.6, 4.2.5.1, 4.2.0)
actionview (4.2.6, 4.2.5.1, 4.2.0)
activejob (4.2.6, 4.2.5.1, 4.2.0)
activemodel (4.2.6, 4.2.5.1, 4.2.0)
activerecord (4.2.6, 4.2.5.1, 4.2.0)
activerecord-sqlserver-adapter (4.2.10, 4.2.6)
activesupport (4.2.6, 4.2.5.1, 4.2.0)
arel (6.0.3, 6.0.0)
bigdecimal (1.2.6)
binding_of_caller (0.7.2)
builder (3.2.2)
bundle (0.0.1)
bundler (1.11.2)
byebug (8.2.3, 8.2.2)
coffee-rails (4.1.1, 4.1.0)
coffee-script (2.4.1, 2.3.0)
coffee-script-source (1.10.0, 1.8.0)
concurrent-ruby (1.0.1, 1.0.0)
debug_inspector (0.0.2)
erubis (2.7.0)
execjs (2.6.0, 2.2.2)
ey_config (0.0.7)
globalid (0.3.6, 0.3.0)
hike (1.2.3)
i18n (0.7.0)
io-console (0.4.3)
jbuilder (2.4.1)
jquery-rails (4.1.1, 4.1.0, 4.0.3)
json (1.8.3, 1.8.2, 1.8.1)
loofah (2.0.3, 2.0.1)
mail (2.6.4, 2.6.3)
mime-types (3.0, 2.99, 2.4.3)
mime-types-data (3.2016.0221)
mini_portile (0.6.2)
mini_portile2 (2.0.0)
minitest (5.8.4, 5.5.0, 5.4.3)
multi_json (1.11.2, 1.10.1)
nokogiri (1.6.7.2 x86-mingw32, 1.6.5 x86-mingw32)
pg (0.18.4 x86-mingw32)
power_assert (0.2.2)
psych (2.0.8)
rack (1.6.4, 1.6.0)
rack-test (0.6.3, 0.6.2)
rails (4.2.6, 4.2.5.1, 4.2.0)
rails-deprecated_sanitizer (1.0.3)
rails-dom-testing (1.0.7, 1.0.5)
rails-html-sanitizer (1.0.3, 1.0.1)
rails_autolink (1.1.6)
railties (4.2.6, 4.2.5.1, 4.2.0)
rake (11.1.2, 10.4.2)
rb-readline (0.5.3)
rdoc (4.2.2, 4.2.0)
rubyzip (1.1.7)
sass (3.4.22, 3.4.21, 3.4.9)
sass-rails (5.0.4, 5.0.1)
sdoc (0.4.1)
simple_form (3.1.0)
sprockets (3.6.0, 3.5.2, 2.12.3)
sprockets-rails (3.0.4, 3.0.1, 2.2.2)
sqlite3 (1.3.11 x86-mingw32)
sqlite3-ruby (1.3.3)
test-unit (3.0.8)
thor (0.19.1)
thread_safe (0.3.5, 0.3.4)
tilt (2.0.2, 1.4.1)
tiny_tds (0.7.0 x86-mingw32)
turbolinks (2.5.3)
tzinfo (1.2.2)
tzinfo-data (1.2016.3)
uglifier (3.0.0, 2.6.1)
web-console (2.3.0)

* Configuration
development
Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded on
  # every request. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.cache_classes = false

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports and disable caching.
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = false

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Debug mode disables concatenation and preprocessing of assets.
  # This option may cause significant delays in view rendering with a large
  # number of complex assets.
  config.assets.debug = true

  # Asset digests allow you to set far-future HTTP expiration dates on all assets,
  # yet still be able to expire them through the digest params.
  config.assets.digest = true

  # Adds additional error checking when serving assets at runtime.
  # Checks for improperly declared sprockets dependencies.
  # Raises helpful error messages.
  config.assets.raise_runtime_errors = true

  # Raises error for missing translations
  # config.action_view.raise_on_missing_translations = true
end

* Database creation
rails g scaffold Rast email:string domain:string path:string page:string access:string

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...

* Instrutions
Environment with MySql / Ruby on Rails installed and configured .
- Access to the folder command line where are the projects;
- Copy the application folder structure " rast " in the " rastreio " folder ;
- If a problem occurs connection, configure the database.yml file ( database / username / password) ;
- Run the command to create the table / field :
" Rails g scaffold email Rast : string domain: string path : page string : string access: string"
- Access " rastreio " up the " rails s" server;
- Open the browser, address " localhost: 3000" ;
- Access the page " localhost: 3000 / rasts " .

Ps.: It was necessary to install and configure MySQL, Ruby and Rails, resulting in failure to complete the task on time.

Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
